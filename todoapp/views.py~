from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import Task
from .forms import TaskForm, UserCreationForm


@login_required
def task_list(request):
    tasks = Task.objects.all(user=request.user)
    template = 'todoapp/task_list.html'
    context = {
        'tasks': tasks
    }
    return render(request, template, context)


@login_required
def task_create(request):
    if request.method == 'POST':
        form = TaskForm(request.POST)
        if form.is_valid():
            task = form.save(commit=False)
            task.user = request.user
            task.save()
            return redirect('tasks')
    else:
        form = TaskForm()
    template = 'todoapp/task_create.html'
    context = {
        'form': form
    }
    return render(request, template, context)


@login_required
def task_details(request, task_id):
    template = 'todoapp/task_details.html'
    task = get_object_or_404(Task, id=task_id)
    context = {
        'task': task
    }
    return render(request, template, context)


@login_required
def task_delete(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    if request.method == 'POST':
        task.delete()
        return redirect('tasks')
    return redirect('tasks')


@login_required
def task_update(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    if request.method == 'POST':
        form = TaskForm(request.POST, instance=task)
        if form.is_valid():
            form.save()
            return redirect('tasks')
    else:
        form = TaskForm(instance=task)
    template = 'todoapp/task_create.html'
    context = {
        'form': form
    }
    return render(request, template, context)


def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('tasks')
    else:
        form = UserCreationForm()
    template = 'registration/register.html'
    context = {
        'form': form
    }
    return render(request, template, context)